/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateWishListArgs } from "./CreateWishListArgs";
import { UpdateWishListArgs } from "./UpdateWishListArgs";
import { DeleteWishListArgs } from "./DeleteWishListArgs";
import { WishListFindManyArgs } from "./WishListFindManyArgs";
import { WishListFindUniqueArgs } from "./WishListFindUniqueArgs";
import { WishList } from "./WishList";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { WishListService } from "../wishList.service";

@graphql.Resolver(() => WishList)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class WishListResolverBase {
  constructor(
    protected readonly service: WishListService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WishList",
    action: "read",
    possession: "any",
  })
  async _wishListsMeta(
    @graphql.Args() args: WishListFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WishList])
  @nestAccessControl.UseRoles({
    resource: "WishList",
    action: "read",
    possession: "any",
  })
  async wishLists(
    @graphql.Args() args: WishListFindManyArgs
  ): Promise<WishList[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WishList, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WishList",
    action: "read",
    possession: "own",
  })
  async wishList(
    @graphql.Args() args: WishListFindUniqueArgs
  ): Promise<WishList | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WishList)
  @nestAccessControl.UseRoles({
    resource: "WishList",
    action: "create",
    possession: "any",
  })
  async createWishList(
    @graphql.Args() args: CreateWishListArgs
  ): Promise<WishList> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WishList)
  @nestAccessControl.UseRoles({
    resource: "WishList",
    action: "update",
    possession: "any",
  })
  async updateWishList(
    @graphql.Args() args: UpdateWishListArgs
  ): Promise<WishList | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WishList)
  @nestAccessControl.UseRoles({
    resource: "WishList",
    action: "delete",
    possession: "any",
  })
  async deleteWishList(
    @graphql.Args() args: DeleteWishListArgs
  ): Promise<WishList | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Product])
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async products(
    @graphql.Parent() parent: WishList,
    @graphql.Args() args: ProductFindManyArgs
  ): Promise<Product[]> {
    const results = await this.service.findProducts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User])
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(
    @graphql.Parent() parent: WishList,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUser(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
